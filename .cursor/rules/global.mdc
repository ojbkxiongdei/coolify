# Global Development Rules

## Code Quality Standards
- **Language**: Use TypeScript for all JavaScript files
- **Formatting**: Consistent code formatting with ESLint
- **Comments**: Write clear, concise comments for complex logic
- **Naming**: Use descriptive variable and function names
- **Error Handling**: Always include proper error handling

## Next.js 14 App Router Best Practices
- **Server Components**: Use server components by default
- **Client Components**: Add `'use client'` directive only when needed
- **File Structure**: Follow App Router conventions
- **API Routes**: Use named exports (GET, POST, etc.)
- **Metadata**: Include proper metadata for SEO

## Environment Variables Pattern
```bash
# Required variables format (do not include actual values):
AZURE_ENDPOINT=
***REMOVED***=
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
***REMOVED***=
***REMOVED***=
***REMOVED***=
NEXT_PUBLIC_SITE_URL=
```

## Development Workflow
1. **Code Review**: All changes require review
2. **Testing**: Test functionality before committing
3. **Linting**: Fix all lint errors before deployment
4. **Performance**: Monitor Core Web Vitals
5. **Security**: Validate all inputs and API calls

## User Authentication & Credits System
- **User Hook**: Use `useUser()` hook for authentication state
- **Credits Calculation**: `available_credits = total_credits - used_credits`
- **Auto-provisioning**: Automatic user profile and credits creation

## Database Best Practices
- **Schema Consistency**: Use proper field names (`last_reset_at`)
- **RLS Policies**: Ensure proper row-level security
- **Migrations**: Apply schema changes via SQL files in lib/database/

## Deployment Checklist
- [ ] All environment variables configured
- [ ] Database migrations completed
- [ ] API endpoints tested
- [ ] Stripe webhook configured
- [ ] Mobile responsiveness verified
- [ ] Performance optimized
- [ ] Security headers configured
- [ ] Error handling implemented

## Common Anti-Patterns to Avoid
❌ Using wrong field names (`last_reset` vs `last_reset_at`)
❌ Blocking UI with synchronous operations
❌ Using `<img>` instead of `<Image>`
❌ Hardcoding API keys in client code
❌ Missing loading states or error boundaries
❌ Poor mobile experience
❌ Not validating user inputs



---

