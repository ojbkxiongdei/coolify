# DreamfinityX Project Structure Guide

## Overview
DreamfinityX is an AI-powered creative tools platform built with Next.js 14, TypeScript, and multi-provider AI integration (Azure OpenAI + OpenAI). Features a comprehensive suite of AI tools with subscription-based credits system and FREE tools for SEO optimization.

## New Architecture (2025 Update)
**Major restructure from single-page tab interface to independent page architecture:**

### Homepage as Brand Aggregation
- **[app/page.tsx](mdc:app/page.tsx)** - Brand showcase homepage with tool overview cards
- **Purpose**: Professional brand presentation, tool discovery, and user onboarding
- **Design**: Hero section + 4 tool cards + features + CTA sections

### Four Independent Functional Pages
1. **[app/text-to-image/page.tsx](mdc:app/text-to-image/page.tsx)** - AI Image Generator
2. **[app/image-editor/page.tsx](mdc:app/image-editor/page.tsx)** - AI Image Editor  
3. **[app/elf-name-generator/page.tsx](mdc:app/elf-name-generator/page.tsx)** - Fantasy Name Generator
4. **[app/character-headcanon-generator/page.tsx](mdc:app/character-headcanon-generator/page.tsx)** - Character Story Generator

Each functional page includes:
- Dedicated URL structure (`/text-to-image`, `/image-editor`, etc.)
- Independent SEO metadata and canonical URLs
- Lazy-loaded SEO content components (1000+ keywords each)
- Bottom CTA buttons with smooth scrolling functionality

## SEO Content Components
- **[components/TextToImageSEO.tsx](mdc:components/TextToImageSEO.tsx)** - 1000+ keywords for image generation
- **[components/ImageEditorSEO.tsx](mdc:components/ImageEditorSEO.tsx)** - 2700+ keywords for image editing
- **[components/ElfNameSEO.tsx](mdc:components/ElfNameSEO.tsx)** - 3500+ keywords for fantasy names
- **[components/CharacterHeadcanonSEO.tsx](mdc:components/CharacterHeadcanonSEO.tsx)** - 1000+ keywords for character stories

## API Routes
- **[app/api/generate-image/route.ts](mdc:app/api/generate-image/route.ts)** - Text-to-image generation (Azure OpenAI)
- **[app/api/edit-image/route.ts](mdc:app/api/edit-image/route.ts)** - Image editing functionality (Azure OpenAI)
- **[app/api/elf-name/route.ts](mdc:app/api/elf-name/route.ts)** - Fantasy name generation (OpenAI Proxy)
- **[app/api/character-headcanon/route.ts](mdc:app/api/character-headcanon/route.ts)** - Character story generation (OpenAI Proxy)
- **[app/api/credits/](mdc:app/api/credits/)** - Credits system API
- **[app/api/payments/](mdc:app/api/payments/)** - Payment processing API

## Core Components
- **[components/ui/navbar.tsx](mdc:components/ui/navbar.tsx)** - Updated with new page links
- **[components/ImageGenerator.tsx](mdc:components/ImageGenerator.tsx)** - Text-to-image interface
- **[components/ImageEditor.tsx](mdc:components/ImageEditor.tsx)** - Image editing interface
- **[components/ElfNameGenerator.tsx](mdc:components/ElfNameGenerator.tsx)** - Fantasy name generator
- **[components/CharacterHeadcanonGenerator.tsx](mdc:components/CharacterHeadcanonGenerator.tsx)** - Character story generator
- **[components/ImageResults.tsx](mdc:components/ImageResults.tsx)** - Display generated images
- **[components/SEOContent.tsx](mdc:components/SEOContent.tsx)** - Homepage SEO content

## Technology Stack
- **Framework**: Next.js 14 with App Router
- **Language**: TypeScript for type safety
- **Styling**: Tailwind CSS with mobile-first design
- **AI**: Azure OpenAI (paid features) + OpenAI Proxy (free features)
- **Database**: Supabase (PostgreSQL)
- **Storage**: Supabase Storage for images
- **Auth**: Supabase Auth with Google OAuth
- **UI Components**: Custom components + Radix UI primitives
- **Payment**: Stripe for subscriptions and one-time payments

## File Organization
```
dreamfinityX/
├── app/                          # Next.js App Router
│   ├── page.tsx                  # Brand aggregation homepage
│   ├── text-to-image/
│   │   └── page.tsx              # AI Image Generator page
│   ├── image-editor/
│   │   └── page.tsx              # AI Image Editor page
│   ├── elf-name-generator/
│   │   └── page.tsx              # Fantasy Name Generator page
│   ├── character-headcanon-generator/
│   │   └── page.tsx              # Character Story Generator page
│   ├── history/page.tsx          # User generation history
│   ├── pricing/page.tsx          # Subscription plans
│   ├── success/page.tsx          # Payment success page
│   └── api/                      # API routes
│       ├── generate-image/route.ts
│       ├── edit-image/route.ts
│       ├── elf-name/route.ts
│       ├── character-headcanon/route.ts
│       ├── credits/
│       ├── payments/
│       └── webhooks/stripe/route.ts
├── components/                   # React components
│   ├── ui/                       # UI components
│   │   ├── navbar.tsx
│   │   ├── button.tsx
│   │   └── card.tsx
│   ├── ImageGenerator.tsx        # Text-to-image interface
│   ├── ImageEditor.tsx           # Image editing interface
│   ├── ElfNameGenerator.tsx      # Fantasy name generator
│   ├── CharacterHeadcanonGenerator.tsx # Character story generator
│   ├── ImageResults.tsx          # Results display
│   ├── SEOContent.tsx            # Homepage SEO content
│   ├── TextToImageSEO.tsx        # Text-to-image SEO content
│   ├── ImageEditorSEO.tsx        # Image editor SEO content
│   ├── ElfNameSEO.tsx            # Elf name SEO content
│   └── CharacterHeadcanonSEO.tsx # Character story SEO content
├── lib/                          # Utilities and configurations
│   ├── supabase/                 # Supabase setup
│   ├── database/                 # Database operations
│   └── hooks/                    # Custom React hooks
│       └── useUser.ts            # Global user state
├── stripe-payment-module/        # Payment integration
└── public/                       # Static assets
```

## Four Core AI Tools
1. **AI Image Generator** (`/text-to-image`)
   - **Technology**: Azure OpenAI GPT-image-1
   - **Pricing**: Credit-based (1-15 credits per generation)
   - **Features**: Multiple styles, resolutions, quality settings

2. **AI Image Editor** (`/image-editor`)
   - **Technology**: Azure OpenAI image editing
   - **Pricing**: Credit-based (1-15 credits per edit)
   - **Features**: Background removal, style transfer, artistic effects

3. **Fantasy Name Generator** (`/elf-name-generator`)
   - **Technology**: OpenAI via proxy (bypasses credits)
   - **Pricing**: FREE (SEO optimization tool)
   - **Features**: Multiple elf types, cultural variations, pronunciation

4. **Character Story Generator** (`/character-headcanon-generator`)
   - **Technology**: OpenAI via proxy (bypasses credits)
   - **Pricing**: FREE (SEO optimization tool)
   - **Features**: Detailed character backgrounds, multiple styles

## SEO Optimization Features
- **Structured Data**: Schema.org markup for all functional pages
- **Meta Tags**: Complete title, description, keywords, OG tags
- **Internal Linking**: Cross-references between related tools
- **Sitemap**: All pages included with proper priority (0.9 for tools)
- **CTA Buttons**: Smooth scrolling to functional areas (no page reloads)
- **Lazy Loading**: SEO content loaded after main functionality

## Design Principles
- **Mobile-First**: Touch-friendly interfaces, responsive design
- **Function-First**: Main tools immediately accessible
- **SEO-Second**: Rich content positioned after functionality
- **Professional UI**: Clean, minimal design with gray/white palette
- **Performance-Focused**: Optimized loading and smooth interactions

## Navigation Updates
- **Navbar**: Updated links to new independent pages
- **Footer**: Corrected internal linking structure
- **CTA Buttons**: Smooth scrolling within same page (no redirects)
- **Breadcrumbs**: Clear navigation hierarchy

## Common Issues & Solutions
1. **CTA Button Behavior**: Use `scrollIntoView()` for smooth scrolling, not href redirects
2. **SEO Content Loading**: Implement Intersection Observer for lazy loading
3. **Meta Tags**: Ensure each page has unique, descriptive metadata
4. **Internal Links**: Update all references from tab-based to page-based URLs
5. **Mobile Responsiveness**: All components must work on mobile devices

## Development Best Practices
- **Independent Pages**: Each tool has its own URL and SEO optimization
- **Shared Components**: Reuse UI components across different pages
- **Consistent Styling**: Maintain design system across all pages
- **Performance**: Lazy load SEO content to prioritize functionality
- **SEO**: Rich, keyword-optimized content for each tool category
