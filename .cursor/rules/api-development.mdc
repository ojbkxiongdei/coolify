# API Development Rules

## Next.js 14 App Router API Routes
- Use named exports: `export async function POST(request: Request)`
- Place API routes in `app/api/` directory structure
- Use `NextRequest` and `NextResponse` for type safety

## Response Patterns
```typescript
// ✅ Success response pattern
return NextResponse.json({
  success: true,
  images: imageUrls, // Array for multiple images
  count: images.length,
  // Backward compatibility
  image: data.data[0].b64_json,
  imageUrl: images[0],
})

// ✅ Error response pattern  
return NextResponse.json({
  success: false,
  error: 'Detailed error message'
}, { status: 400 })
```

## Azure OpenAI Integration
```typescript
// ✅ Generation API call pattern
const response = await fetch(
  `${AZURE_ENDPOINT}/openai/deployments/gpt-image-1/images/generations?api-version=2025-04-01-preview`,
  {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${***REMOVED***}`,
    },
    body: JSON.stringify({
      prompt,
      size,
      quality,
      output_format,
      n,
    }),
  }
)

// ✅ Edit API call pattern
const azureFormData = new FormData()
azureFormData.append('image', imageFile)
azureFormData.append('prompt', prompt)
azureFormData.append('model', 'gpt-image-1')

const response = await fetch(
  `${AZURE_ENDPOINT}/openai/deployments/gpt-image-1/images/edits?api-version=2025-04-01-preview`,
  {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${***REMOVED***}`,
    },
    body: azureFormData,
  }
)
```

## File Upload Handling
```typescript
// ✅ FormData processing
const formData = await request.formData()
const imageFile = formData.get('image') as File
const prompt = formData.get('prompt') as string

if (!imageFile || !prompt) {
  return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
}
```

## Parameter Validation
```typescript
// ✅ Validation patterns
const validSizes = ['1024x1024', '1024x1536', '1536x1024']
const validQualities = ['low', 'medium', 'high']
const validFormats = ['png', 'jpeg'] // NO WebP support

if (!validSizes.includes(size)) {
  return NextResponse.json({ error: 'Invalid size' }, { status: 400 })
}

if (n < 1 || n > 10) {
  return NextResponse.json({ error: 'Number of images must be between 1 and 10' }, { status: 400 })
}
```

## Error Handling
```typescript
// ✅ Comprehensive error handling
try {
  // API call logic
} catch (error) {
  console.error('API error:', error)
  return NextResponse.json(
    { success: false, error: 'Internal server error' },
    { status: 500 }
  )
}

// ✅ Azure API error handling
if (!response.ok) {
  const errorData = await response.text()
  console.error('Azure API error:', errorData)
  return NextResponse.json(
    { error: 'Image generation failed, please try again later' },
    { status: 500 }
  )
}
```

## Environment Variables
```typescript
// ✅ Environment validation
const AZURE_ENDPOINT = process.env.AZURE_ENDPOINT
const ***REMOVED*** = process.env.***REMOVED***

if (!AZURE_ENDPOINT || !***REMOVED***) {
  throw new Error('Missing required environment variables')
}
```

## API Response Processing
```typescript
// ✅ Base64 image processing
const data = await response.json()

if (!data.data || !Array.isArray(data.data) || data.data.length === 0) {
  return NextResponse.json(
    { error: 'Invalid image data format received' },
    { status: 500 }
  )
}

// Process multiple images
const images = data.data.map((item: any) => {
  if (!item.b64_json) {
    throw new Error('Missing image data')
  }
  return `data:image/${output_format};base64,${item.b64_json}`
})
```

## CORS and Headers
```typescript
// ✅ CORS handling if needed
const headers = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type',
}

// ✅ Handle OPTIONS requests
export async function OPTIONS() {
  return new Response(null, { status: 200, headers })
}
```

## Performance Considerations
- Keep API responses under 6MB for Vercel limits
- Use streaming for large responses when possible
- Implement request timeout handling
- Log performance metrics for monitoring

## Credits System API

### Credits Balance API
```typescript
// GET /api/credits/balance
export async function GET() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  let { data: credits, error } = await supabase
    .from('user_credits')
    .select('*')
    .eq('user_id', user.id)
    .single()

  // Auto-create credits record if missing
  if (error?.code === 'PGRST116') {
    const { data: newCredits, error: createError } = await supabase
      .from('user_credits')
      .insert({
        user_id: user.id,
        total_credits: 0,
        used_credits: 0,
        last_reset_at: new Date().toISOString()
      })
      .select()
      .single()
    
    credits = newCredits
  }

  return NextResponse.json({
    ...credits,
    available_credits: credits.total_credits - credits.used_credits
  })
}
```

### Credits Consumption API
```typescript
// POST /api/credits/consume
export async function POST(request: Request) {
  const { amount } = await request.json()
  
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  // Check available credits
  const { data: credits } = await supabase
    .from('user_credits')
    .select('*')
    .eq('user_id', user.id)
    .single()

  const availableCredits = credits.total_credits - credits.used_credits
  
  if (availableCredits < amount) {
    return NextResponse.json(
      { error: 'Insufficient credits' },
      { status: 400 }
    )
  }

  // Consume credits
  const { error } = await supabase
    .from('user_credits')
    .update({
      used_credits: credits.used_credits + amount
    })
    .eq('user_id', user.id)

  if (error) {
    return NextResponse.json({ error: 'Failed to consume credits' }, { status: 500 })
  }

  return NextResponse.json({ success: true })
}
```

### Payment Processing API
```typescript
// POST /api/payments/create
export async function POST(request: Request) {
  const { priceId, type } = await request.json()
  
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()
  
  if (!user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const stripe = new Stripe(process.env.***REMOVED***!)
  
  try {
    if (type === 'subscription') {
      // Create subscription
      const session = await stripe.checkout.sessions.create({
        mode: 'subscription',
        payment_method_types: ['card'],
        line_items: [{ price: priceId, quantity: 1 }],
        success_url: `${process.env.NEXT_PUBLIC_SITE_URL}/success`,
        cancel_url: `${process.env.NEXT_PUBLIC_SITE_URL}/pricing`,
        customer_email: user.email,
        metadata: { userId: user.id, type: 'subscription' }
      })
      
      return NextResponse.json({ url: session.url })
    } else {
      // One-time payment
      const session = await stripe.checkout.sessions.create({
        mode: 'payment',
        payment_method_types: ['card'],
        line_items: [{ price: priceId, quantity: 1 }],
        success_url: `${process.env.NEXT_PUBLIC_SITE_URL}/success`,
        cancel_url: `${process.env.NEXT_PUBLIC_SITE_URL}/pricing`,
        customer_email: user.email,
        metadata: { userId: user.id, type: 'credits' }
      })
      
      return NextResponse.json({ url: session.url })
    }
  } catch (error) {
    return NextResponse.json(
      { error: 'Payment creation failed' },
      { status: 500 }
    )
  }
}
```

## Authentication Middleware
```typescript
// ✅ User authentication pattern
const supabase = await createClient()
const { data: { user } } = await supabase.auth.getUser()

if (!user) {
  return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
}
```

## Database Error Handling
```typescript
// ✅ Handle missing user records
if (error?.code === 'PGRST116') {
  // Auto-create missing record
  const { data: newData, error: createError } = await supabase
    .from('table_name')
    .insert(defaultData)
    .select()
    .single()
}
```

## Security Best Practices
- Validate all input parameters
- Sanitize file uploads
- Rate limiting implementation
- API key protection
- Input size limits
- User authentication on protected routes
- Row Level Security (RLS) for database access

## API Response Standards
- Maintain backward compatibility with single `imageUrl` field
- Return arrays in `images` field for multiple results
- Consistent error response format
- Include success/error flags in responses

- Return arrays in `images` field for multiple results
- Consistent error response format
- Include success/error flags in responses
