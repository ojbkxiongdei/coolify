# React开发指南

## 组件架构

### 组件分类

项目中的组件分为以下几类：

1. **页面组件** - 位于`app`目录下的`page.tsx`文件
   - 通常是服务器组件，提供初始内容和SEO数据
   - 导入并使用客户端组件处理交互

2. **客户端组件** - 带有`'use client'`指令的交互组件
   - 命名通常为`[功能]Client.tsx`
   - 处理状态管理和用户交互

3. **SEO组件** - 提供额外SEO内容的组件
   - 命名通常为`[功能]SEO.tsx`
   - 包含关键词丰富的内容和结构化数据

4. **UI组件** - 位于`components/ui`目录下的基础UI组件
   - 按钮、输入框、卡片等可复用元素
   - 基于Radix UI原语或自定义实现

### 组件文件结构

```tsx
// 典型的客户端组件结构
'use client'

// 1. 导入
import { useState, useEffect } from 'react'
import { useUser } from '@/lib/hooks/useUser'
import { Button } from '@/components/ui/button'

// 2. 类型定义
interface ComponentProps {
  initialValue: string
  onChange?: (value: string) => void
}

// 3. 组件定义
export default function Component({ initialValue, onChange }: ComponentProps) {
  // 状态和钩子
  const [value, setValue] = useState(initialValue)
  const { user } = useUser()
  
  // 副作用
  useEffect(() => {
    // 副作用逻辑
  }, [value])
  
  // 事件处理函数
  const handleChange = (newValue: string) => {
    setValue(newValue)
    onChange?.(newValue)
  }
  
  // 渲染
  return (
    <div>
      {/* 组件内容 */}
    </div>
  )
}
```

## 服务器组件与客户端组件

### 服务器组件最佳实践

- 默认使用服务器组件（不添加`'use client'`）
- 适用于静态内容、SEO内容和数据获取
- 在服务器组件中不使用React hooks
- 使用Supabase服务器客户端进行数据库操作

```tsx
// 页面组件（服务器组件）
import { Suspense } from 'react'
import ClientComponent from '@/components/ClientComponent'
import SEOComponent from '@/components/SEOComponent'

export const metadata = {
  title: "页面标题",
  description: "页面描述"
}

export default async function Page() {
  // 在服务器上获取数据
  const data = await fetchData()
  
  return (
    <main>
      <h1>页面标题</h1>
      <ClientComponent initialData={data} />
      <Suspense fallback={<div>加载中...</div>}>
        <SEOComponent />
      </Suspense>
    </main>
  )
}
```

### 客户端组件最佳实践

- 仅当需要交互性时才使用客户端组件
- 添加`'use client'`指令在文件顶部
- 使用React hooks进行状态管理
- 使用事件处理函数处理用户交互
- 使用Supabase客户端进行客户端数据操作

```tsx
'use client'

import { useState } from 'react'
import { useUser } from '@/lib/hooks/useUser'

export default function ClientComponent({ initialData }) {
  const [data, setData] = useState(initialData)
  const { user } = useUser()
  
  const handleSubmit = async (e) => {
    e.preventDefault()
    // 处理表单提交
  }
  
  return (
    <form onSubmit={handleSubmit}>
      {/* 表单内容 */}
    </form>
  )
}
```

## 状态管理

### 局部状态

- 使用`useState`和`useReducer`处理组件局部状态
- 对于复杂状态，使用`useReducer`维护一致性

### 全局状态

- 使用自定义hooks共享状态
  - `useUser()` - 用户信息和认证状态
  - `usePaymentStatus()` - 支付和订阅状态

### 持久化状态

- 使用`localStorage`存储会话间数据
- 客户端组件中使用自定义`useLocalStorage`钩子

```tsx
// 使用localStorage的自定义hook
function useLocalStorage<T>(key: string, initialValue: T) {
  // 实现
}
```

## 性能优化

### 组件优化

- 使用`React.memo`避免不必要的重渲染
- 使用`useCallback`和`useMemo`缓存函数和计算值

### 数据获取

- 在服务器组件中预取数据
- 使用React Suspense进行数据加载边界

### 延迟加载

- 使用`dynamic`导入延迟加载大型组件
- 对SEO内容使用Intersection Observer延迟加载

```tsx
// 延迟加载组件
const DynamicComponent = dynamic(() => import('@/components/HeavyComponent'), {
  loading: () => <p>加载中...</p>,
})
```

## UI组件指南

### 按钮

- 使用`components/ui/button.tsx`中的Button组件
- 支持多种变体：primary, secondary, outline, ghost

### 表单元素

- 使用`components/ui/input.tsx`、`components/ui/textarea.tsx`等
- 结合`components/ui/label.tsx`提供无障碍标签

### 导航

- 使用`components/ui/navigation-menu.tsx`构建导航
- 确保正确实现导航菜单的定位

## 错误处理

- 使用错误边界捕获和显示组件错误
- 对API调用使用try-catch进行错误处理
- 提供用户友好的错误消息

```tsx
try {
  await apiCall()
} catch (error) {
  console.error('API调用失败:', error)
  setError('操作失败，请稍后再试')
}
```

## 代码风格

- 使用TypeScript确保类型安全
- 使用功能组件和React hooks
- 使用解构赋值简化props和状态
- 使用箭头函数处理事件
- 在适当的地方使用异步/等待语法
