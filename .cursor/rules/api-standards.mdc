# API开发标准

## API路由组织

项目的API路由基于Next.js的App Router模式，位于`app/api`目录下：

```
/app/api/
  ├── auth/             # 认证相关API
  ├── character-headcanon/ # 角色背景生成API
  ├── credits/          # 积分系统API
  ├── edit-image/       # 图像编辑API
  ├── elf-name/         # 精灵名字生成API
  ├── generate-image/   # 图像生成API
  ├── generations/      # 生成历史API
  ├── ghibli-style-convert/ # 吉卜力风格转换API
  ├── pixar-style-convert/ # 皮克斯风格转换API
  ├── subscriptions/    # 订阅管理API
  └── webhooks/         # 外部服务回调API
```

## API路由标准

### 路由文件结构

每个API路由应包含以下标准结构：

```ts
import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { consumeCredits } from '@/lib/database/actions'

// 请求处理函数
export async function POST(request: Request) {
  try {
    // 1. 提取并验证请求数据
    const data = await request.json()
    const { required_field } = data
    
    if (!required_field) {
      return NextResponse.json(
        { success: false, error: "Missing required field" }, 
        { status: 400 }
      )
    }
    
    // 2. 验证用户认证
    const supabase = createClient()
    const { data: { user } } = await supabase.auth.getUser()
    
    if (!user) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" }, 
        { status: 401 }
      )
    }
    
    // 3. 执行主要业务逻辑
    const result = await performOperation(data)
    
    // 4. 记录使用情况（如适用）
    await consumeCredits(user.id, credits_amount)
    
    // 5. 返回成功响应
    return NextResponse.json({ 
      success: true, 
      data: result 
    })
    
  } catch (error) {
    console.error("API error:", error)
    return NextResponse.json(
      { success: false, error: "Server error" }, 
      { status: 500 }
    )
  }
}
```

### 响应格式

所有API响应应使用统一的JSON格式：

```ts
// 成功响应
{
  success: true,
  data: { ... } // 响应数据
}

// 错误响应
{
  success: false,
  error: "错误信息"
}
```

## 认证和授权

### 用户认证

```ts
// 获取当前认证用户
const supabase = createClient()
const { data: { user } } = await supabase.auth.getUser()

if (!user) {
  return NextResponse.json(
    { success: false, error: "Unauthorized" }, 
    { status: 401 }
  )
}
```

### 权限验证

```ts
// 检查用户积分
const { data: credits } = await supabase
  .from('user_credits')
  .select('available_credits')
  .eq('user_id', user.id)
  .single()

if (!credits || credits.available_credits < required_credits) {
  return NextResponse.json(
    { success: false, error: "Insufficient credits" }, 
    { status: 403 }
  )
}
```

## 错误处理

### 错误类型

- **400** - 客户端错误（无效的请求参数）
- **401** - 未认证（用户未登录）
- **403** - 未授权（用户无权限）
- **404** - 资源未找到
- **429** - 请求过多（速率限制）
- **500** - 服务器错误

### 错误处理模式

```ts
try {
  // 业务逻辑
} catch (error) {
  console.error("API error:", error)
  
  // 根据错误类型返回不同状态码
  if (error.code === 'SOME_SPECIFIC_ERROR') {
    return NextResponse.json(
      { success: false, error: "Specific error message" }, 
      { status: 400 }
    )
  }
  
  // 默认服务器错误
  return NextResponse.json(
    { success: false, error: "Server error" }, 
    { status: 500 }
  )
}
```

## 数据验证

使用基本的条件检查验证请求数据：

```ts
const { prompt, size, quality } = await request.json()

// 必填字段验证
if (!prompt) {
  return NextResponse.json(
    { success: false, error: "Prompt is required" }, 
    { status: 400 }
  )
}

// 枚举值验证
const validSizes = ['small', 'medium', 'large']
if (size && !validSizes.includes(size)) {
  return NextResponse.json(
    { success: false, error: "Invalid size" }, 
    { status: 400 }
  )
}
```

## 积分系统集成

使用`consumeCredits`函数扣除用户积分：

```ts
import { consumeCredits } from '@/lib/database/actions'

// 生成操作完成后扣除积分
const credits_used = 5
await consumeCredits(user.id, credits_used)
```

## API文档示例

### 图像生成API

**端点**: `/api/generate-image`  
**方法**: POST  
**描述**: 基于文本提示生成图像

**请求体**:
```json
{
  "prompt": "一只蓝色的猫在月光下",
  "size": "medium",
  "quality": "standard"
}
```

**成功响应** (200):
```json
{
  "success": true,
  "data": {
    "images": ["url1", "url2"],
    "credits_used": 5
  }
}
```

**错误响应** (400):
```json
{
  "success": false,
  "error": "Prompt is required"
}
```

## 外部API集成

### Azure OpenAI

```ts
// Azure OpenAI集成示例
const response = await fetch(`${process.env.AZURE_ENDPOINT}/openai/images/generations:submit`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'api-key': process.env.***REMOVED***
  },
  body: JSON.stringify({
    prompt,
    n: 1,
    size: size || '1024x1024',
    response_format: 'url'
  })
})

const data = await response.json()
```

### OpenAI

```ts
// OpenAI集成示例
const response = await fetch('https://api.openai.com/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
  },
  body: JSON.stringify({
    model: "gpt-4",
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ]
  })
})

const data = await response.json()
```
