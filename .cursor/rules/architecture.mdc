# 项目架构

## 目录结构

- `/app` - Next.js App Router页面和API路由
  - `/api` - 后端API端点
  - 其他目录 - 前端页面路由

- `/components` - 可复用React组件
  - `/ui` - 基础UI组件（按钮、输入框等）
  - 其他文件 - 功能性组件和页面组件

- `/lib` - 工具函数和服务
  - `/database` - 数据库相关代码和迁移
  - `/hooks` - React自定义hooks
  - `/supabase` - Supabase客户端和服务器端配置
  - `/utils` - 通用工具函数

- `/public` - 静态资源
  - `/seo-images` - SEO优化的图片资源

## 前端架构

### 页面组件结构

每个功能页面通常由以下组件组成：
- `page.tsx` - 服务器组件，提供初始页面内容和SEO元数据
- `*Client.tsx` - 客户端组件，处理用户交互和状态管理
- `*SEO.tsx` - SEO优化组件，包含结构化数据和SEO内容

### 状态管理

- 使用React hooks进行本地状态管理
- 使用自定义hooks（如`useUser()`）访问全局状态
- 使用localStorage进行会话间数据持久化

## 后端架构

### API端点组织

- `/app/api/` 下按功能分组
- 使用标准的Next.js App Router API路由约定
- 所有API端点都返回统一的响应格式

### 数据库结构

- 使用Supabase作为后端数据库和认证服务
- 关键表:
  - `users` - 用户信息
  - `credits` - 积分系统
  - `generations` - 生成的内容记录
  - `subscriptions` - 订阅信息

## 认证和授权

- 使用Supabase Auth进行用户认证
- OAuth提供商：Google
- 中间件用于保护需要认证的路由
- Row Level Security (RLS)用于数据库授权

## SEO架构

- 三级URL结构: `/[pillar]/[cluster]/[leaf]`
- 每个页面使用专门的SEO组件
- 使用Schema.org结构化数据标记
- 自动生成的XML站点地图

## 支付和订阅

- Stripe用于处理支付和管理订阅
- 积分系统用于计量API使用情况
- 包含订阅计划和一次性支付选项
